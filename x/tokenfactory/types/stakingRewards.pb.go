// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/tokenfactory/v1beta1/stakingRewards.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakingRewards struct {
	Amount     types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	StartBlock int64      `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock   int64      `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (m *StakingRewards) Reset()         { *m = StakingRewards{} }
func (m *StakingRewards) String() string { return proto.CompactTextString(m) }
func (*StakingRewards) ProtoMessage()    {}
func (*StakingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba508b21e3be006a, []int{0}
}
func (m *StakingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewards.Merge(m, src)
}
func (m *StakingRewards) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewards proto.InternalMessageInfo

func (m *StakingRewards) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *StakingRewards) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *StakingRewards) GetEndBlock() int64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*StakingRewards)(nil), "osmosis.tokenfactory.v1beta1.StakingRewards")
}

func init() {
	proto.RegisterFile("osmosis/tokenfactory/v1beta1/stakingRewards.proto", fileDescriptor_ba508b21e3be006a)
}

var fileDescriptor_ba508b21e3be006a = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x2a, 0x55, 0xe0, 0x0a, 0x86, 0x08, 0xa4, 0x52, 0x90, 0x5b, 0x75, 0xea, 0x64,
	0xab, 0xb0, 0x20, 0xc6, 0x76, 0x61, 0x0e, 0x1b, 0x0b, 0x72, 0x1c, 0x93, 0x58, 0x69, 0xfc, 0xaa,
	0xd8, 0x01, 0x72, 0x0b, 0x46, 0x8e, 0xd4, 0xb1, 0x23, 0x53, 0x85, 0x92, 0x1b, 0x70, 0x02, 0x14,
	0x27, 0x45, 0x74, 0xb3, 0xdf, 0xe7, 0xef, 0xff, 0xe5, 0x87, 0xe7, 0x60, 0x32, 0x30, 0xca, 0x30,
	0x0b, 0xa9, 0xd4, 0x2f, 0x5c, 0x58, 0xc8, 0x4b, 0xf6, 0x3a, 0x0f, 0xa5, 0xe5, 0x73, 0x66, 0x2c,
	0x4f, 0x95, 0x8e, 0x03, 0xf9, 0xc6, 0xf3, 0xc8, 0xd0, 0x75, 0x0e, 0x16, 0xfc, 0xeb, 0x4e, 0xa1,
	0xff, 0x15, 0xda, 0x29, 0xa3, 0xf3, 0x18, 0x62, 0x70, 0x0f, 0x59, 0x73, 0x6a, 0x9d, 0x11, 0x11,
	0x4e, 0x62, 0x21, 0x37, 0xf2, 0x2f, 0x5d, 0x80, 0xd2, 0x2d, 0x9f, 0x7e, 0x22, 0x7c, 0xf6, 0x78,
	0x50, 0xe6, 0x3f, 0xe0, 0x3e, 0xcf, 0xa0, 0xd0, 0x76, 0x88, 0x26, 0x68, 0x36, 0xb8, 0xb9, 0xa4,
	0x6d, 0x06, 0x6d, 0x32, 0xf6, 0x75, 0x74, 0x09, 0x4a, 0x2f, 0x2e, 0x36, 0xbb, 0xb1, 0xf7, 0xb3,
	0x1b, 0x9f, 0x96, 0x3c, 0x5b, 0xdd, 0x4f, 0x5b, 0x6d, 0x1a, 0x74, 0xbe, 0x3f, 0xc6, 0x03, 0x63,
	0x79, 0x6e, 0x9f, 0xc3, 0x15, 0x88, 0x74, 0x78, 0x34, 0x41, 0xb3, 0x5e, 0x80, 0xdd, 0x68, 0xd1,
	0x4c, 0xfc, 0x2b, 0x7c, 0x22, 0x75, 0xd4, 0xe1, 0x9e, 0xc3, 0xc7, 0x52, 0x47, 0x0e, 0x2e, 0x82,
	0x4d, 0x45, 0xd0, 0xb6, 0x22, 0xe8, 0xbb, 0x22, 0xe8, 0xa3, 0x26, 0xde, 0xb6, 0x26, 0xde, 0x57,
	0x4d, 0xbc, 0xa7, 0xbb, 0x58, 0xd9, 0xa4, 0x08, 0xa9, 0x80, 0x8c, 0x2d, 0x13, 0x95, 0x14, 0x3c,
	0x29, 0xf8, 0x32, 0xe1, 0x4a, 0x33, 0xb1, 0xbf, 0xb2, 0xf7, 0xc3, 0xcd, 0xda, 0x72, 0x2d, 0x4d,
	0xd8, 0x77, 0xbf, 0xbe, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x55, 0x7e, 0xc0, 0x00, 0x7e, 0x01,
	0x00, 0x00,
}

func (m *StakingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlock != 0 {
		i = encodeVarintStakingRewards(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintStakingRewards(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStakingRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStakingRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakingRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovStakingRewards(uint64(l))
	if m.StartBlock != 0 {
		n += 1 + sovStakingRewards(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovStakingRewards(uint64(m.EndBlock))
	}
	return n
}

func sovStakingRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakingRewards(x uint64) (n int) {
	return sovStakingRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakingRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakingRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakingRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakingRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakingRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakingRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakingRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakingRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakingRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakingRewards = fmt.Errorf("proto: unexpected end of group")
)
